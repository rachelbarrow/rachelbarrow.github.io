!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e){t.exports='<div id="button">\n  <span><slot></slot></span>\n</div>'},,,function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r);const i={tiny:"tiny",xsmall:"xsmall",small:"small",medium:"medium",large:"large"},s={primary:"primary",secondary:"secondary",dark:"dark"},a=document.createElement("template");a.innerHTML=o.a;const l=document.createElement("style");l.innerHTML='#button {\n  text-align: center;\n  border: 0.3rem solid #a5a5a5; /* default color is light grey */\n  padding: 0 5px;\n  height: 3rem;\n  line-height: 3rem;\n  display: inline-block;\n\n  /* transition-duration:0.4s; */\n  cursor: pointer;\n}\n\n#button:hover {\n  background-color: #a5a5a5; /* default color is light grey */\n  color: white;\n}\n\n.shadow {\n  box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24);\n}\n\n.rounded {\n  border-radius: 1rem;\n}\n\n/* rules for default size circle */\n#button.circle {\n  border-radius: 50%;\n  overflow: hidden;\n  width: 4rem;\n  height: 4rem;\n  line-height: 4rem;\n}\n\n/* rules for small size circle */\n#button.small.circle {\n  width: 3rem;\n  height: 3rem;\n  line-height: 3rem;\n}\n\n/* rules for medium size circle */\n#button.medium.circle {\n  width: 5rem;\n  height: 5rem;\n  line-height: 5rem;\n}\n\n/* rules for large size circle */\n#button.large.circle {\n  width: 6rem;\n  height: 6rem;\n  line-height: 6rem;\n}\n\n/* rules for tiny size button */\n#button.tiny {\n  font-size: 10px;\n  height: 1.2rem;\n  line-height: 1.2rem;\n}\n\n/* rules for extra small size button */\n#button.xsmall {\n  font-size: 12px;\n  height: 1.5rem;\n  line-height: 1.5rem;\n}\n\n/* rules for small size button */\n#button.small {\n  font-size: 14px;\n  width: 4rem;\n  height: 2rem;\n  line-height: 2rem;\n}\n\n/* rules for medium size button */\n#button.medium {\n  font-size: 16px;\n  width: 7rem;\n  height: 4rem;\n  line-height: 4rem;\n}\n\n/* rules for large size button */\n#button.large {\n  font-size: 22px;\n  width: 10rem;\n  height: 5rem;\n  line-height: 5rem;\n}\n\n#button.primary {\n  border: 0.3rem solid #4286f4; /* primary color is blue */\n}\n\n#button.primary:hover {\n  background-color: #4386f4; /* primary color is blue */\n  color: white;\n}\n\n#button.secondary {\n  border: 0.3rem solid #f44336; /* secondary color is red */\n}\n\n#button.secondary:hover {\n  background-color: #f44336; /* secondary color is red */\n  color: white;\n}\n\n#button.dark {\n  border: 0.3rem solid #555; /* dark color is dark grey */\n}\n\n#button.dark:hover {\n  background-color: #555; /* dark color is dark grey */\n  color: white;\n}\n\n/* this rule adds the animation of moving the button text\n   to the left smoothly */\n#button.animated span {\n  cursor: pointer;\n  display: inline-block;\n  position: relative;\n  transition: 0.5s;\n}\n\n/* this rule adds the ">>" to the button text */\n#button.animated span::after {\n  content: \'\\00bb\';\n  position: absolute;\n  right: -20px;\n  transition: 0.5s;\n  opacity: 0;\n  top: 0;\n}\n\n/* this rule moves the button text over to make room for ">>" */\n#button.animated:hover span {\n  padding-right: 25px;\n}\n\n/* this rule makes the ">>" visible when button is hovered on */\n#button.animated:hover span::after {\n  opacity: 1;\n  right: 0;\n}';class u extends HTMLElement{static get observedAttributes(){return["rounded","size","shadow","color","animated","circle"]}constructor(){super();const t=this.attachShadow({mode:"open"});t.appendChild(a.content.cloneNode(!0)),t.appendChild(l.cloneNode(!0)),this._button=t.getElementById("button")}get rounded(){return this.hasAttribute("rounded")}get size(){return this.getAttribute("size")}get shadow(){return this.hasAttribute("shadow")}get color(){return this.getAttribute("color")}get animated(){return this.hasAttribute("animated")}get circle(){return this.hasAttribute("circle")}set rounded(t){t?this.setAttribute("rounded",""):this.removeAttribute("rounded")}set size(t){t?this.setAttribute("size",t):this.removeAttribute("size")}set shadow(t){t?this.setAttribute("shadow",t):this.removeAttribute("shadow")}set color(t){t?this.setAttribute("color",t):this.removeAttribute("color")}set animated(t){t?this.setAttribute("animated",t):this.removeAttribute("animated")}set circle(t){t?this.setAttribute("circle",t):this.removeAttribute("circle")}attributeChangedCallback(t,e,n){switch(t){case"rounded":case"shadow":case"animated":case"circle":{const e=""==n;this.addToClassList(t,e);break}case"size":{const t=i[n],e=null!=t;this.addToClassList(t,e);break}case"color":{const t=s[n],e=null!=t;this.addToClassList(t,e);break}}}addToClassList(t,e){e?this._button.classList.add(t):this._button.classList.remove(t)}}customElements.get("core-button")||customElements.define("core-button",u)}]);